//<?php

/**
 * This file is part of byrokrat/accounting.
 *
 * byrokrat/accounting is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat/accounting is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat/accounting. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-21 Hannes ForsgÃ¥rd
 */

namespace byrokrat\accounting\Sie4\Parser;

use byrokrat\accounting\AccountingDate;
use byrokrat\accounting\MoneyFactory;
use byrokrat\accounting\Sie4\SieMetaData;
use byrokrat\accounting\Transaction\Transaction;
use byrokrat\accounting\Verification\Verification;
use Money\Currency;

/**
 * Grammar for generating a SIE version 4 compliant parser
 *
 * Referenced rules are from the SIE specs dated 2008-09-30
 */
grammar Grammar
{
    start SIE_CONTENT = RESET_STATE FLAGGA_POST posts:(VALID_POST / IGNORED_CONTENT)* _ {
        return array_filter(
            $posts,
            fn($post) => $post instanceof Verification
        );
    };

    RESET_STATE = '' {
        $this->accounts = new AccountBuilder();
        $this->dimensions = new DimensionBuilder();
        $this->meta = new SieMetaData();
        $this->moneyFactory = new MoneyFactory();
    };

    FLAGGA_POST = ROW_START 'FLAGGA' ^ flag:STRING? ROW_END {
        $this->meta->sieFlag = (string)$flag;
    };

    VALID_POST = FNAMN_POST
        / FNR_POST
        / FORMAT_POST
        / GEN_POST
        / KPTYP_POST
        / ORGNR_POST
        / PROGRAM_POST
        / PROSA_POST
        / SIETYP_POST
        / RAR_POST
        / TAXAR_POST
        / VALUTA_POST
        / KONTO_POST
        / KTYP_POST
        / DIM_POST
        / UNDERDIM_POST
        / OBJEKT_POST
        / IB_POST
        / UB_POST
        / OIB_POST
        / OUB_POST
        / RES_POST
        / VER_POST;

    FNAMN_POST = ROW_START 'FNAMN' ^ name:STRING? ROW_END {
        $this->meta->companyName = (string)$name;
    };

    FNR_POST = ROW_START 'FNR' ^ id:STRING? ROW_END {
        $this->meta->companyIdCode = (string)$id;
    };

    FORMAT_POST = ROW_START 'FORMAT' ^ charset:STRING? ROW_END {
        $this->meta->charset = (string)$charset;
    };

    GEN_POST = ROW_START 'GEN' ^ date:STRING? user:STRING? ROW_END {
        $this->meta->generationDate = (string)$date;
        $this->meta->generatingUser = (string)$user;
    };

    KPTYP_POST = ROW_START 'KPTYP' ^ type:STRING? ROW_END {
        $this->meta->accountPlanType = (string)$type;
    };

    ORGNR_POST = ROW_START 'ORGNR' ^ number:STRING? ROW_END {
        $this->meta->companyOrgNr = (string)$number;
    };

    PROGRAM_POST = ROW_START 'PROGRAM' ^ name:STRING? version:STRING? ROW_END {
        $this->meta->generatingProgram = (string)$name;
        $this->meta->generatingProgramVersion = (string)$version;
    };

    PROSA_POST = ROW_START 'PROSA' ^ text:STRING* ROW_END {
        $this->meta->description = implode(' ', $text);
    };

    SIETYP_POST = ROW_START 'SIETYP' ^ ver:STRING? ROW_END {
        $this->meta->sieVersion = (string)$ver;
    };

    RAR_POST = RAR_CURRENT_YEAR / RAR_PREVIOUS_YEAR;

    RAR_CURRENT_YEAR = ROW_START 'RAR' CURRENT_YEAR ^ yearStart:STRING? yearEnd:STRING? ROW_END {
        $this->meta->accountingYearStart = (string)$yearStart;
        $this->meta->accountingYearEnd = (string)$yearEnd;
    };

    RAR_PREVIOUS_YEAR = ROW_START 'RAR' PREVIOUS_YEAR ^ yearStart:STRING? yearEnd:STRING? ROW_END {
        $this->meta->previousAccountingYearStart = (string)$yearStart;
        $this->meta->previousAccountingYearEnd = (string)$yearEnd;
    };

    TAXAR_POST = ROW_START 'TAXAR' ^ year:STRING? ROW_END {
        $this->meta->taxationYear = (string)$year;
    };

    VALUTA_POST = ROW_START 'VALUTA' ^ currency:STRING? ROW_END {
        $this->meta->currency = (string)$currency;
        $this->moneyFactory->setCurrency(new Currency($currency));
    };

    KONTO_POST = ROW_START 'KONTO' ^ number:STRING? desc:STRING? ROW_END {
        $this->accounts->defineAccount(id: (string)$number, description: (string)$desc);
    };

    KTYP_POST = ROW_START 'KTYP' ^ number:STRING? type:STRING? ROW_END {
        $this->accounts->defineAccount(id: (string)$number, type: (string)$type);
    };

    DIM_POST = ROW_START 'DIM' ^ id:STRING? desc:STRING? ROW_END {
        $this->dimensions->defineDimension(id: (string)$id, description: (string)$desc);
    };

    UNDERDIM_POST = ROW_START 'UNDERDIM' ^ id:STRING? desc:STRING? parent:STRING? ROW_END {
        $this->dimensions->defineDimension(id: (string)$id, parent: (string)$parent, description: (string)$desc);
    };

    OBJEKT_POST = ROW_START 'OBJEKT' ^ parent:STRING? id:STRING? desc:STRING? ROW_END {
        $this->dimensions->defineObject(id: (string)$id, parent: (string)$parent, description: (string)$desc);
    };

    IB_POST = IB_CURRENT_YEAR / IB_PREVIOUS_YEAR;

    IB_CURRENT_YEAR = ROW_START 'IB' CURRENT_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, incomingBalance: $this->moneyFactory->createMoney($balance));
    };

    IB_PREVIOUS_YEAR = ROW_START 'IB' PREVIOUS_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, attributes: [ParserAttributes::PREVIOUS_INCOMING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
    };

    UB_POST = UB_CURRENT_YEAR / UB_PREVIOUS_YEAR;

    UB_CURRENT_YEAR = ROW_START 'UB' CURRENT_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, attributes: [ParserAttributes::OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
    };

    UB_PREVIOUS_YEAR = ROW_START 'UB' PREVIOUS_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, attributes: [ParserAttributes::PREVIOUS_OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
    };

    OIB_POST = OIB_CURRENT_YEAR / OIB_PREVIOUS_YEAR;

    OIB_CURRENT_YEAR = ROW_START 'OIB' CURRENT_YEAR ^ STRING dims:OBJECT_LIST balance:STRING ROW_END {
        foreach ($dims as list($parent, $id)) {
            $this->dimensions->defineObject(id: $id, parent: $parent, incomingBalance: $this->moneyFactory->createMoney($balance));
        }
    };

    OIB_PREVIOUS_YEAR = ROW_START 'OIB' PREVIOUS_YEAR ^ STRING dims:OBJECT_LIST balance:STRING ROW_END {
        foreach ($dims as list($parent, $id)) {
            $this->dimensions->defineObject(id: $id, parent: $parent, attributes: [ParserAttributes::PREVIOUS_INCOMING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
        }
    };

    OUB_POST = OUB_CURRENT_YEAR / OUB_PREVIOUS_YEAR;

    OUB_CURRENT_YEAR = ROW_START 'OUB' CURRENT_YEAR ^ STRING dims:OBJECT_LIST balance:STRING ROW_END {
        foreach ($dims as list($parent, $id)) {
            $this->dimensions->defineObject(id: $id, parent: $parent, attributes: [ParserAttributes::OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
        }
    };

    OUB_PREVIOUS_YEAR = ROW_START 'OUB' PREVIOUS_YEAR ^ STRING dims:OBJECT_LIST balance:STRING ROW_END {
        foreach ($dims as list($parent, $id)) {
            $this->dimensions->defineObject(id: $id, parent: $parent, attributes: [ParserAttributes::PREVIOUS_OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
        }
    };

    RES_POST = RES_CURRENT_YEAR / RES_PREVIOUS_YEAR;

    RES_CURRENT_YEAR = ROW_START 'RES' CURRENT_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, attributes: [ParserAttributes::OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
    };

    RES_PREVIOUS_YEAR = ROW_START 'RES' PREVIOUS_YEAR ^ number:STRING balance:STRING ROW_END {
        $this->accounts->defineAccount(id: $number, attributes: [ParserAttributes::PREVIOUS_OUTGOING_BALANCE_ATTRIBUTE => $this->moneyFactory->createMoney($balance)]);
    };

    VER_POST = ROW_START 'VER' ^ series:STRING? number:STRING? date:STRING? desc:STRING? regdate:STRING? sign:STRING? ROW_END trans:TRANS_LIST {
        return new Verification(
            id: (string)$number,
            transactionDate: AccountingDate::fromString((string)$date),
            registrationDate: $regdate ? AccountingDate::fromString($regdate) : null,
            description: (string)$desc,
            signature: (string)$sign,
            transactions: array_map(
                fn($tran) => new Transaction(
                    added: $tran['added'] ?? false,
                    deleted: $tran['deleted'] ?? false,
                    verificationId: (string)$number,
                    transactionDate: AccountingDate::fromString($tran['date'] ?: (string)$date),
                    description: $tran['desc'] ?: (string)$desc,
                    signature: $tran['sign'] ?: (string)$sign,
                    amount: $this->moneyFactory->createMoney($tran['amount']),
                    account: $this->accounts->getAccount($tran['account']),
                    dimensions: array_map(
                        fn($def) => $this->dimensions->getObject(id: $def[1], parent: $def[0]),
                        $tran['dims']
                    ),
                ),
                $trans
            ),
            attributes: [ParserAttributes::VERIFICATION_SERIES_ATTRIBUTE => (string)$series],
        );
    };

    TRANS_LIST = _ '{' _ EOL trans:(TRANS_POST / ADDED_TRANS_POST / IGNORED_CONTENT)* _ '}' _ EOL? {
        return array_filter($trans);
    };

    TRANS_POST = ROW_START label:('TRANS' / 'BTRANS') ^ account:STRING dims:OBJECT_LIST amount:STRING date:STRING? desc:STRING? STRING? sign:STRING? ROW_END {
        return [
            'deleted' => 'BTRANS' == $label,
            'account' => $account,
            'amount' => $amount,
            'date' => $date,
            'desc' => (string)$desc,
            'sign' => (string)$sign,
            'dims' => $dims,
        ];
    };

    ADDED_TRANS_POST = ROW_START 'RTRANS' ^ account:STRING dims:OBJECT_LIST amount:STRING date:STRING? desc:STRING? STRING? sign:STRING? ROW_END TRANS_POST {
        return [
            'added' => true,
            'account' => $account,
            'amount' => $amount,
            'date' => $date,
            'desc' => (string)$desc,
            'sign' => (string)$sign,
            'dims' => $dims,
        ];
    };

    IGNORED_CONTENT = UNKNOWN_POST / EMPTY_LINE;

    UNKNOWN_POST = ROW_START STRING* EOL;

    ROW_START = EMPTY_LINE* _ '#';

    ROW_END = fields:STRING* _ EOL?;

    CURRENT_YEAR = _ '0' _;

    PREVIOUS_YEAR = _ '-1' _;

    OBJECT_LIST = _ '{' definitions:OBJECT_DEFINITION* '}' _ {
        return $definitions;
    };

    OBJECT_DEFINITION = parent:OBJECT_LIST_SAFE_STRING id:OBJECT_LIST_SAFE_STRING {
        return [$parent, $id];
    };

    OBJECT_LIST_SAFE_STRING = _ string:($(OBJECT_ID_SAFE_CHAR+) / QUOTED_STRING) _ {
        return $string;
    };

    OBJECT_ID_SAFE_CHAR = ![{}] CHAR;

    STRING = _ string:($(CHAR+) / QUOTED_STRING / EMPTY_STRING) _ {
        return $string;
    };

    EMPTY_STRING = '""' {
        return '';
    };

    QUOTED_STRING = '"' string:(ESCAPED_QUOTE / ' ' / CHAR)* '"' {
        return implode($string);
    };

    ESCAPED_QUOTE = '\"' {
        return '"';
    };

    CHAR = [a-zA-Z0-9!#$%&'()*+,-.\/:;<=>?@\[\\\]^_`{|}~âÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â ];

    EMPTY_LINE = _ EOL;

    EOL = "\r"? "\n";

    _ = (" " / "\t")*;
}
