//<?php
/**
 * This file is part of byrokrat/accounting.
 *
 * byrokrat/accounting is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat/accounting is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat/accounting. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016 Hannes ForsgÃ¥rd
 */

namespace byrokrat\accounting\Sie4;

/**
 * Grammar for generating a SIE version 4 compliant parser
 *
 * Build using scato/phpeg. Please note that a concrete parser used implement
 * the ConsumerInterface.
 *
 * @see     ConsumerInterface
 * @example "vendor/bin/phpeg generate src/Sie4/Grammar.peg" To rebuild the parser (from project root)
 */
grammar Grammar
{
    start FILE = ROW*;

    ROW = ADRESS_ROW / UNKNOWN_ROW / EMPTY_LINE;

    UNKNOWN_ROW = SPACE '#' label:[a-zA-Z]+ fields:FIELD+ EOL {
        return $this->onUnknown(implode($label), $fields);
    };

    ADRESS_ROW = SPACE '#ADRESS' kontakt:FIELD utdelningsadr:FIELD postadr:FIELD tel:FIELD END_OF_ROW {
        return $this->onAdress((string)$kontakt, (string)$utdelningsadr, (string)$postadr, (string)$tel);
    };

    FLAG_ROW = SPACE '#FLAGGA' flag:BOOLEAN END_OF_ROW {
        // TODO BOOLEAN should be a kind of field, see amount below..
        // TODO possibly implement as a trait, see Helper/CurrencyBuilder
        return $this->onFlag($flag);
    };

    CURRENCY_ROW = SPACE '#VALUTA' iso4217:FIELD END_OF_ROW {
        return $this->onCurrency($iso4217);
    };

    AMOUNT = negation:"-"? units:[0-9]+ "."? subunits:([0-9]? [0-9]?) {
        // TODO amount should be a kind of field (meaning support for SPACE delimiters and quotes...)
        // TODO a lot of testing needed: - optional, decimal delimiter optional, subunits 0-2 chars
        return $this->onAmount($negation.implode($units).'.'.implode($subunits));
    };

    FIELD = SPACE content:CONTENT SPACE {
        return implode($content);
    };

    CONTENT = [a-zA-Z0-9]+;

    EMPTY_LINE = SPACE EOL;

    END_OF_ROW = FIELD* EOL;

    SPACE = (" " / "\t")*;

    EOL = "\r"? "\n";
}
