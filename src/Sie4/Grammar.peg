//<?php
/**
 * This file is part of byrokrat/accounting.
 *
 * byrokrat/accounting is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat/accounting is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat/accounting. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016 Hannes Forsgård
 */

namespace byrokrat\accounting\Sie4;

use byrokrat\accounting\Transaction;
use byrokrat\amount\Amount;

/**
 * Grammar for generating a SIE version 4 compliant parser using scato/phpeg
 *
 * @see "bin/build_sie_parser" To rebuild the parser
 *
 * @TODO The usage of attribut keys concerning year identifiers and intervalls
 *     $this->extendAttribute($attributable, [$key = 'PSALDO', $subkey = '0', ...], $value);
 *     eller någonting liknande. Skriv även bättre tester för detta på något sätt...
 */
grammar Grammar extends AbstractParser
{
    start FILE =
        FLAGGA_POST
        (CHECKSUMED_SIE_CONTENT / SIE_CONTENT)
        EMPTY_LINE*
        _;

    CHECKSUMED_SIE_CONTENT =
        KSUMMA_START_POST
        SIE_CONTENT
        KSUMMA_END_POST;

    SIE_CONTENT =
        IDENTIFICATION_POST*
        (ACCOUNT_PLAN_POST / MISPLACED_IDENTIFICATION_POST)*
        (BALANCE_POST / MISPLACED_IDENTIFICATION_POST / MISPLACED_ACCOUNT_PLAN_POST)*;

    // Flag and checksum posts

    FLAGGA_POST = ROW_START 'FLAGGA' ^ flag:BOOLEAN? ROW_END {
        if ($this->assertBool($flag)) {
            $this->getContainer()->setAttribute('FLAGGA', $flag);
        }
    };

    KSUMMA_START_POST = ROW_START 'KSUMMA' ROW_END;

    KSUMMA_END_POST = ROW_START 'KSUMMA' checksum:INT? ROW_END {
        if ($this->assertInt($checksum, 'Expected checksum')) {
            $this->getContainer()->setAttribute('KSUMMA', $checksum);
            $this->getLogger()->notice('Checksum detected but currently not handled');
        }
    };

    // Posts for identification and meta-data

    MISPLACED_IDENTIFICATION_POST = IDENTIFICATION_POST {
        $this->getLogger()->warning('Misplaced identification post');
    };

    MISPLACED_ACCOUNT_PLAN_POST = ACCOUNT_PLAN_POST {
        $this->getLogger()->warning('Misplaced account plan post');
    };

    IDENTIFICATION_POST = ADRESS_POST
        / BKOD_POST
        / FNAMN_POST
        / FNR_POST
        / FORMAT_POST
        / FTYP_POST
        / GEN_POST
        / KPTYP_POST
        / OMFATTN_POST
        / ORGNR_POST
        / PROGRAM_POST
        / PROSA_POST
        / RAR_POST
        / SIETYP_POST
        / TAXAR_POST
        / VALUTA_POST
        / VOID_ROW;

    ADRESS_POST = ROW_START 'ADRESS' ^ contact:STRING? address:STRING? location:STRING? phone:STRING? ROW_END {
        $this->getContainer()->setAttribute('ADRESS', [(string)$contact, (string)$address, (string)$location, (string)$phone]);
    };

    BKOD_POST = ROW_START 'BKOD' ^ sni:INT? ROW_END {
        if ($this->assertInt($sni, 'Expected SNI code')) {
            $this->getContainer()->setAttribute('BKOD', $sni);
        }
    };

    FNAMN_POST = ROW_START 'FNAMN' ^ name:STRING? ROW_END {
        if ($this->assertString($name, 'Expected company name')) {
            $this->getContainer()->setAttribute('FNAMN', $name);
        }
    };

    FNR_POST = ROW_START 'FNR' ^ id:STRING? ROW_END {
        if ($this->assertString($id, 'Expected company identifier')) {
            $this->getContainer()->setAttribute('FNR', $id);
        }
    };

    FORMAT_POST = ROW_START 'FORMAT' ^ charset:STRING? ROW_END {
        if ($this->assertString($charset, 'Expected charset identifier')) {
            if ($charset != 'PC8') {
                $this->getLogger()->warning("Unknown charset $charset defined using #FORMAT");
            }

            $this->getContainer()->setAttribute('FORMAT', $charset);
        }
    };

    FTYP_POST = ROW_START 'FTYP' ^ type:STRING? ROW_END {
        if ($this->assertString($type, 'Expected company type identifier')) {
            $this->getContainer()->setAttribute('FTYP', $type);
        }
    };

    GEN_POST = ROW_START 'GEN' ^ date:DATE? sign:STRING? ROW_END {
        if ($this->assertDate($date)) {
            $this->getContainer()->setAttribute('GEN', [$date, strval($sign)]);
        }
    };

    KPTYP_POST = ROW_START 'KPTYP' ^ type:STRING? ROW_END {
        if ($this->assertString($type, 'Expected account plan type identifier')) {
            $this->getContainer()->setAttribute('KPTYP', $type);
        }
    };

    OMFATTN_POST = ROW_START 'OMFATTN' ^ date:DATE? ROW_END {
        if ($this->assertDate($date)) {
            $this->getContainer()->setAttribute('OMFATTN', $date);
        }
    };

    ORGNR_POST = ROW_START 'ORGNR' ^ number:STRING? acquisition:INT? operation:INT? ROW_END {
        if ($this->assertString($number, 'Expected organisation number')) {
            $this->getContainer()->setAttribute('ORGNR', [$number, intval($acquisition), intval($operation)]);
        }
    };

    PROGRAM_POST = ROW_START 'PROGRAM' ^ name:STRING? version:STRING? ROW_END {
        if ($this->assertString($name, 'Expected name') && $this->assertString($version, 'Expected version')) {
            $this->getContainer()->setAttribute('PROGRAM', [$name, $version]);
        }
    };

    PROSA_POST = ROW_START 'PROSA' ^ text:STRING? ROW_END {
        if ($this->assertString($text, 'Expected free text content')) {
            $this->getContainer()->setAttribute('PROSA', $text);
        }
    };

    RAR_POST = ROW_START 'RAR' ^ year:INT? startDate:DATE? endDate:DATE? ROW_END {

        // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
        /*
            Skulle kunna använda \DatePeriod för detta..
            Men vad betyder det? Ska vi använda period istället för årsnummer?

            $this->getContainer()->setAttribute('RAR', [$year, $datePeriod]);

            $account->setAttribute("IB", [$year, $datePeriod, $balance, $quantity ?: 0]);

            Hm, det här behöver jag fundera mer över...


         */

        if ($this->assertInt($year) && $this->assertDate($startDate) && $this->assertDate($endDate)) {
            $this->getContainer()->setAttribute("RAR $year", [$startDate, $endDate]);
        }
    };

    SIETYP_POST = ROW_START 'SIETYP' ^ ver:INT? ROW_END {
        if ($this->assertInt($ver, 'Expected SIE version')) {
            $this->getContainer()->setAttribute('SIETYP', $ver);
        }
    };

    TAXAR_POST = ROW_START 'TAXAR' ^ year:INT ROW_END {
        if ($this->assertInt($year)) {
            $this->getContainer()->setAttribute("TAXAR", $year);
        }
    };

    VALUTA_POST = ROW_START 'VALUTA' ^ currency:STRING? ROW_END {
        if ($this->assertString($currency, 'Expected currency name')) {
            $this->getContainer()->setAttribute('VALUTA', $currency);
            $this->getCurrencyBuilder()->setCurrencyClass($currency);
        }
    };

    // Posts defining the account plan

    ACCOUNT_PLAN_POST = KONTO_POST
        / KTYP_POST
        / ENHET_POST
        / SRU_POST
        / DIM_POST
        / UNDERDIM_POST
        / OBJEKT_POST
        / VOID_ROW;

    KONTO_POST = ROW_START 'KONTO' ^ number:STRING? desc:STRING? ROW_END {
        if ($this->assertString($number, 'Expected account number') && $this->assertString($desc, 'Expected account description')) {
            $this->getAccountBuilder()->addAccount($number, $desc);
        }
    };

    KTYP_POST = ROW_START 'KTYP' ^ number:STRING? type:STRING? ROW_END {
        if ($this->assertString($number, 'Expected account number') && $this->assertString($type, 'Expected account type identifier')) {
            $this->getAccountBuilder()->setAccountType($number, $type);
        }
    };

    ENHET_POST = ROW_START 'ENHET' ^ account:ACCOUNT? unit:STRING? ROW_END {
        if ($this->assertAccount($account) && $this->assertString($unit, 'Expected unit')) {
            $account->setAttribute('unit', $unit);
        }
    };

    SRU_POST = ROW_START 'SRU' ^ account:ACCOUNT? sru:INT? ROW_END {
        if ($this->assertAccount($account) && $this->assertInt($sru, 'Expected SRU code')) {
            $account->setAttribute('sru', $sru);
        }
    };

    DIM_POST = ROW_START 'DIM' ^ dim:INT? desc:STRING? ROW_END {
        if ($this->assertInt($dim) && $this->assertString($desc)) {
            $this->getDimensionBuilder()->addDimension((string)$dim, $desc);
        }
    };

    UNDERDIM_POST = ROW_START 'UNDERDIM' ^ dim:INT? desc:STRING? super:INT? ROW_END {
        if ($this->assertInt($dim) && $this->assertString($desc) && $this->assertInt($super)) {
            $this->getDimensionBuilder()->addDimension((string)$dim, $desc, (string)$super);
        }
    };

    OBJEKT_POST = ROW_START 'OBJEKT' ^ dim:INT? obj:STRING? desc:STRING? ROW_END {
        if ($this->assertInt($dim) && $this->assertString($obj) && $this->assertString($desc)) {
            $this->getDimensionBuilder()->addObject((string)$dim, $obj, $desc);
        }
    };

    // Posts defining balances and verifications

    BALANCE_POST = IB_POST
        / UB_POST
        / OIB_POST
        / OUB_POST
        / PBUDGET_POST
        / PSALDO_POST
        / RES_POST
        / VER_POST
        / VOID_ROW;

    IB_POST = ROW_START 'IB' ^ year:INT? account:ACCOUNT? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertAccount($account) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            $account->setAttribute("IB $year", [$balance, $quantity ?: null]);
        }
    };

    UB_POST = ROW_START 'UB' ^ year:INT? account:ACCOUNT? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertAccount($account) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            $account->setAttribute("UB $year", [$balance, $quantity ?: null]);
        }
    };

    OIB_POST = ROW_START 'OIB' ^ year:INT? account:ACCOUNT? objects:OBJECT_LIST? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            foreach ($objects as $object) {
                $object->setAttribute("IB $year", [$balance, $quantity ?: null]);
            }
        }
    };

    OUB_POST = ROW_START 'OUB' ^ year:INT? account:ACCOUNT? objects:OBJECT_LIST? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            foreach ($objects as $object) {
                $object->setAttribute("UB $year", [$balance, $quantity ?: null]);
            }
        }
    };

    PBUDGET_POST = ROW_START 'PBUDGET' ^ year:INT? period:DATE? account:ACCOUNT? objects:OBJECT_LIST? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertDate($period) && $this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            $key = "PBUDGET $year " . $period->format('Ym');

            $account->setAttribute($key, [$balance, $quantity ?: null]);

            foreach ($objects as $object) {
                $object->setAttribute($key, [$balance, $quantity ?: null]);
            }
        }
    };

    PSALDO_POST = ROW_START 'PSALDO' ^ year:INT? period:DATE? account:ACCOUNT? objects:OBJECT_LIST? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertDate($period) && $this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($balance)) {
            $key = "PSALDO $year " . $period->format('Ym');
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut

            $account->setAttribute($key, [$balance, $quantity ?: null]);

            foreach ($objects as $object) {
                $object->setAttribute($key, [$balance, $quantity ?: null]);
            }
        }
    };

    RES_POST = ROW_START 'RES' ^ year:INT? account:ACCOUNT? balance:AMOUNT? quantity:FLOAT? ROW_END {
        if ($this->assertInt($year) && $this->assertAccount($account) && $this->assertAmount($balance)) {
            // TODO här ska bokföringsår sparas på något intelligentare sätt till attribut
            $account->setAttribute("RES $year", [$balance, $quantity ?: null]);
        }
    };

    VER_POST = ROW_START 'VER' ^ series:STRING? number:STRING? date:DATE? desc:STRING? regdate:DATE? sign:STRING? ROW_END SUBROW_START trans:TRANS_LIST SUBROW_END {
        if ($this->assertString($series) && $this->assertString($number) && $this->assertDate($date)) {
            $this->getContainer()->addItem(
                $this->getVerificationBuilder()->createVerification(
                    $series,
                    $number,
                    $date,
                    $desc ?: '',
                    $regdate ?: null,
                    $sign ?: '',
                    $trans
                )
            );
        }
    };

    TRANS_LIST = trans:(TRANS_POST / BTRANS_POST / RTRANS_POST / UNKNOWN_POST)* {
        return array_filter(
            $trans,
            function ($item) {
                return $item instanceof Transaction;
            }
        );
    };

    TRANS_POST = ROW_START 'TRANS' ^ account:ACCOUNT? objects:OBJECT_LIST? amount:AMOUNT? date:OPTIONAL_DATE? desc:STRING? quantity:FLOAT? sign:STRING? ROW_END {
        if ($this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($amount)) {
            return $this->getVerificationBuilder()->createTransaction(
                $account,
                $objects,
                $amount,
                $date ?: null,
                $desc ?: '',
                $quantity ?: null,
                $sign ?: ''
            );
        }
    };

    BTRANS_POST = ROW_START 'BTRANS' ^ account:ACCOUNT? objects:OBJECT_LIST? amount:AMOUNT? date:OPTIONAL_DATE? desc:STRING? quantity:FLOAT? sign:STRING? ROW_END {
        if ($this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($amount)) {
            $this->getLogger()->notice('Detected a BTRANS post, removed transactions are not supported yet..');
        }
    };

    RTRANS_POST = ROW_START 'RTRANS' ^ account:ACCOUNT? objects:OBJECT_LIST? amount:AMOUNT? date:OPTIONAL_DATE? desc:STRING? quantity:FLOAT? sign:STRING? ROW_END {
        if ($this->assertAccount($account) && $this->assertArray($objects) && $this->assertAmount($amount)) {
            $this->getLogger()->notice('Detected a RTRANS post, added transactions are not supported yet..');
        }
    };

    //
    // Unknown rows and lines
    //

    VOID_ROW = UNKNOWN_POST / INVALID_LINE / EMPTY_LINE;

    INVALID_LINE = _ !'#' fields:STRING+ EOL {
        $this->getLogger()->warning('Ignored invalid line "' . implode(' ', $fields) . '"');
    };

    UNKNOWN_POST = ROW_START !VALID_LABEL label:VALID_CHARS ^ vars:STRING* EOL {
        $this->getLogger()->notice(
            array_reduce(
                $vars,
                function ($carry, $var) {
                    return "$carry \"$var\"";
                },
                "Ignored unknown statement: #$label"
            )
        );
    };

    VALID_LABEL = 'ADRESS'
        / 'BKOD'
        / 'DIM'
        / 'ENHET'
        / 'FLAGGA'
        / 'FNAMN'
        / 'FNR'
        / 'FORMAT'
        / 'FTYP'
        / 'GEN'
        / 'IB'
        / 'KONTO'
        / 'KPTYP'
        / 'KSUMMA'
        / 'KTYP'
        / 'OBJEKT'
        / 'OIB'
        / 'OMFATTN'
        / 'ORGNR'
        / 'OUB'
        / 'PBUDGET'
        / 'PROGRAM'
        / 'PROSA'
        / 'PSALDO'
        / 'RAR'
        / 'RES'
        / 'SIETYP'
        / 'SRU'
        / 'TAXAR'
        / 'TRANS'
        / 'RTRANS'
        / 'BTRANS'
        / 'UB'
        / 'UNDERDIM'
        / 'VALUTA'
        / 'VER';

    //
    // Row utilities
    //

    SUBROW_START = _ '{' _ EOL;

    SUBROW_END = _ '}' _ EOL?;

    ROW_START = EMPTY_LINE* _ '#';

    ROW_END = fields:STRING* _ EOL? {
        foreach ($fields as $field) {
            $this->getLogger()->notice("Ignored unknown field $field at end of line");
        }
    };

    //
    // The type system
    //

    // Date

    OPTIONAL_DATE = date:(DATE / EMPTY_STRING) {
        return $date;
    };

    DATE = _ date:(RAW_DATE / QUOTED_DATE) _ {
        return $date;
    };

    QUOTED_DATE = '"' date:RAW_DATE '"' {
            return $date;
    };

    RAW_DATE = year:([0-9] [0-9] [0-9] [0-9]) month:([0-9] [0-9])? day:([0-9] [0-9])? {
        return new \DateTimeImmutable(
            implode($year)
            . (implode((array)$month) ?: '01')
            . (implode((array)$day) ?: '01')
        );
    };

    // Amount

    AMOUNT = _ amount:(RAW_AMOUNT / QUOTED_AMOUNT) _ {
        return $amount;
    };

    QUOTED_AMOUNT = '"' amount:RAW_AMOUNT '"' {
        return $amount;
    };

    RAW_AMOUNT = negation:"-"? units:[0-9]+ "."? subunits:([0-9]? [0-9]?) {
        return $this->getCurrencyBuilder()->createMoney($negation.implode($units).'.'.implode($subunits));
    };

    // Account

    ACCOUNT = number:STRING {
        return $this->getAccountBuilder()->getAccount($number);
    };

    // Object

    OBJECT = super:INT obj:OBJECT_LIST_SAFE_STRING {
        return $this->getDimensionBuilder()->getObject((string)$super, $obj);
    };

    OBJECT_LIST_SAFE_STRING = _ string:(OBJECT_ID_SAFE_CHARS / QUOTED_STRING) _ {
        return $string;
    };

    OBJECT_ID_SAFE_CHARS = chars:[a-zA-Z0-9!#$%&'()*+,-.\/:;<=>?@\[\\\]^_`|~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■]+ {
        return implode($chars);
    };

    OBJECT_LIST = _ '{' objects:OBJECT* '}' _ {
        return $objects;
    };

    // Float

    FLOAT = _ float:(RAW_FLOAT / QUOTED_FLOAT) _ {
        return new Amount($float);
    };

    QUOTED_FLOAT = '"' float:RAW_FLOAT '"' {
        return $float;
    };

    RAW_FLOAT = int:RAW_INT '.'? trailing:[0-9]* {
        return $int.'.'.implode($trailing);
    };

    // Integer

    INT = _ int:(RAW_INT / QUOTED_INT) _ {
        return $int;
    };

    QUOTED_INT = '"' int:RAW_INT '"' {
        return $int;
    };

    RAW_INT = negation:"-"? units:[0-9]+ {
        return intval($negation.implode($units));
    };

    // Boolean

    BOOLEAN = _ bool:(RAW_BOOLEAN / QUOTED_BOOLEAN) _ {
        return $bool;
    };

    QUOTED_BOOLEAN = '"' bool:RAW_BOOLEAN '"' {
        return $bool;
    };

    RAW_BOOLEAN = bool:[01] {
        return !!$bool;
    };

    // String

    STRING = _ string:(VALID_CHARS / QUOTED_STRING / EMPTY_STRING) _ {
        return $string;
    };

    EMPTY_STRING = '""' {
        return '';
    };

    QUOTED_STRING = '"' string:(ESCAPED_QUOTE / ' ' / VALID_CHARS)* '"' {
        return implode($string);
    };

    ESCAPED_QUOTE = '\"' {
        return '"';
    };

    VALID_CHARS = chars:[a-zA-Z0-9!#$%&'()*+,-.\/:;<=>?@\[\\\]^_`{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■]+ {
        return implode($chars);
    };

    //
    // Miscellaneous
    //

    EMPTY_LINE = _ EOL;

    EOL = "\r"? "\n" {
        $this->getLogger()->incrementLineCount();
    };

    _ = (" " / "\t")*;
}
